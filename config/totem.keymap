#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"                                       // key-position labels
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                          // thumb keys

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&sk {
    quick-release;
    release-after-ms = <900>;
};

&caps_word {
    no-default-keys;
    continue-list = <UNDERSCORE BACKSPACE DELETE SQT MINUS>;
    shift-list =
        <R T Y U I O P>,
        <A S D F G H J K L SEMICOLON>,
        <X C V B N M COMMA PERIOD SLASH>;
};

/ {
    combos {
        compatible = "zmk,combos";

        mwheel_up {
            bindings = <&msc MOVE_Y(20)>;
            key-positions = <6 8>;
        };

        mwheel_down {
            bindings = <&msc MOVE_Y(-20)>;
            key-positions = <27 29>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 2>;
        };

        semicolon {
            bindings = <&kp Z>;
            key-positions = <2 3>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <1 11>;
        };

        lpar {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 12>;
        };

        lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 13>;
        };

        times {
            bindings = <&kp ASTERISK>;
            key-positions = <4 14>;
        };

        tilde {
            bindings = <&hml LA(LCTRL) PIPE>;
            key-positions = <11 12>;
            timeout-ms = <16>;
        };

        eq {
            bindings = <&hml LC(LSHFT) EQUAL>;
            key-positions = <12 13>;
            timeout-ms = <16>;
        };

        hash {
            bindings = <&kp NON_US_HASH>;
            key-positions = <14 25>;
        };

        lbrac {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <12 23>;
        };

        lt {
            bindings = <&kp LS(W)>;
            key-positions = <13 24>;
        };

        pipe {
            bindings = <&kp LS(NON_US_BSLH)>;
            key-positions = <11 22>;
        };

        colon {
            bindings = <&kp LS(Z)>;
            key-positions = <23 24>;
        };

        apos {
            bindings = <&kp SQT>;
            key-positions = <6 7>;
        };

        quote {
            bindings = <&kp AT>;
            key-positions = <7 8>;
            timeout-ms = <16>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <5 15>;
        };

        rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <6 16>;
        };

        rpar {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <8 18>;
        };

        hyphen {
            bindings = <&hmr RS(RCTRL) MINUS>;
            key-positions = <16 17>;
            timeout-ms = <16>;
        };

        at {
            bindings = <&hmr RC(RALT) DOUBLE_QUOTES>;
            key-positions = <17 18>;
            timeout-ms = <16>;
        };

        gt {
            bindings = <&kp LS(E)>;
            key-positions = <16 27>;
        };

        rbrac {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 28>;
        };

        amp {
            bindings = <&kp AMPS>;
            key-positions = <29 18>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <27 28>;
            timeout-ms = <16>;
        };

        pct {
            bindings = <&kp PERCENT>;
            key-positions = <28 29>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <32 34 35 37>;
        };

        question {
            bindings = <&kp LS(Q)>;
            key-positions = <22 23>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <8 9>;
        };

        gaming_layer_toggle {
            bindings = <&tog 1>;
            key-positions = <20 31>;
        };

        pound {
            bindings = <&kp LS(NUMBER_3)>;
            key-positions = <26 15>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <22 24>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                 &kp Q        &kp W        &kp E         &kp R         &kp T          &kp Y          &kp U         &kp I         &kp O            &kp P
                 &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G          &kp H          &hmr RSHFT J  &hmr RCTRL K  &hmr LEFT_ALT L  &hmr RGUI SEMICOLON
&kp NON_US_BSLH  &kp Z        &kp X        &kp C         &kp V         &kp B          &kp N          &kp M         &kp COMMA     &kp PERIOD       &kp SLASH            &kp SQT
                                           &lt 5 DELETE  &lt 2 TAB     &lt 3 ENTER    &kp BACKSPACE  &lt 4 SPACE   &smart_shft
            >;
        };

        gaming_layer {
            label = "GAMING";
            bindings = <
                 &kp Q  &kp W  &kp E         &kp R      &kp T          &kp Y          &kp U      &kp I        &kp O       &kp P
                 &kp A  &kp S  &kp D         &kp F      &kp G          &kp H          &kp J      &kp K        &kp L       &kp SEMI
&kp NON_US_BSLH  &kp Z  &kp X  &kp C         &kp V      &kp B          &kp N          &kp M      &kp COMMA    &kp PERIOD  &kp SLASH  &kp SQT
                               &lt 5 DELETE  &lt 2 TAB  &lt 3 ENTER    &kp BACKSPACE  &kp SPACE  &smart_shft
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
        &trans  &trans    &kp UP    &trans     &trans    &trans  &kp PRINTSCREEN  &kp SCROLLLOCK   &kp PAUSE_BREAK  &trans
        &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans    &trans  &hmr RSHFT INS   &hmr RCTRL HOME  &hmr RALT PG_UP  &kp RGUI
&trans  &trans  &trans    &trans    &trans     &trans    &trans  &kp DELETE       &kp END          &kp PG_DN        &trans    &trans
                          &trans    &none      &trans    &trans  &trans           &trans
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &kp N7        &kp NUMBER_8  &kp NUMBER_9  &kp KP_PLUS
        &trans  &trans  &trans  &trans  &trans    &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_MULTIPLY  &kp SLASH
                        &trans  &trans  &none     &trans  &kp NUMBER_0  &trans
            >;
        };

        adjust_layer {
            label = "ADJ";
            bindings = <
        &sys_reset   &bt BT_CLR  &out OUT_TOG  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12
        &bootloader  &bt BT_NXT  &trans        &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans       &bt BT_PRV  &trans        &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                 &trans        &trans  &trans    &trans  &trans  &trans
            >;
        };

        mouse_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans    &trans          &mmv MOVE_UP    &trans           &trans
        &trans  &trans  &trans  &trans  &trans    &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans          &none           &trans           &trans  &trans
                        &trans  &trans  &trans    &mkp MB1  &mkp MB3        &mkp MB2
            >;
        };
    };
};
